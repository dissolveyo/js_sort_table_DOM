{"version":3,"sources":["scripts/main.js"],"names":["tableHeadRef","document","querySelector","tableBodyRef","tableHeadRowsRef","querySelectorAll","tableBodyRowsRef","employeeArray","getEmployees","list","arrayOfEmployees","forEach","row","tableRow","children","employeeObject","i","length","propertyName","innerHTML","toLowerCase","propertyValue","push","sortList","sortBy","sortedList","sort","firstEmployee","secondEmployee","firstSortValue","secondSortValue","formatSalary","compareAsStrings","map","element","name","position","age","salary","join","addEventListener","e","tableHeadData","target","a","b","firstString","String","secondString","replaceAll","slice"],"mappings":";AAAA,aA2FC,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAxFD,IAAMA,EAAeC,SAASC,cAAc,SACtCC,EAAeF,SAASC,cAAc,SACtCE,EAAuBH,EAAAA,SAASI,iBAAiB,gBACjDC,EAAuBL,EAAAA,SAASI,iBAAiB,aAEjDE,EAAgBC,EAAaF,GASnC,SAASE,EAAaC,GACdC,IAAAA,EAAmB,GAgBlBA,OAdPD,EAAKE,QAAQ,SAACC,GAIP,IAHCC,IAAAA,EAAeD,EAAAA,EAAIE,UACnBC,EAAiB,GAEdC,EAAI,EAAGA,EAAIH,EAASI,OAAQD,IAAK,CAClCE,IAAAA,EAAed,EAAiBY,GAAGG,UAAUC,cAC7CC,EAAgBR,EAASG,GAAGG,UAElCJ,EAAeG,GAAgBG,EAGjCX,EAAiBY,KAAKP,KAGjBL,EAGT,SAASa,EAASd,EAAMe,GAChBC,IAAAA,EAAiBhB,EAAAA,GAiChBgB,OA/BPA,EAAWC,KAAK,SAACC,EAAeC,GAC1BC,IAAAA,EAAiBF,EAAcH,GAC/BM,EAAkBF,EAAeJ,GAOjCA,MALW,WAAXA,IACFK,EAAiBE,EAAaF,GAC9BC,EAAkBC,EAAaD,IAGlB,SAAXN,GAAgC,aAAXA,EAChBQ,EAAiBH,EAAgBC,GAEjCD,EAAiBC,IAI5B3B,EAAagB,UACRM,UAAAA,OAAAA,EACFQ,IACC,SAACC,GAGOA,MAAAA,6BAAAA,OAAAA,EAAQC,KACRD,uBAAAA,OAAAA,EAAQE,SACRF,uBAAAA,OAAAA,EAAQG,IACRH,uBAAAA,OAAAA,EAAQI,OANhB,wBASDC,KAAK,IAZR,YAeOd,EA7DTzB,EAAawC,iBAAiB,QAAS,SAACC,GAChCC,IACAlB,EADgBiB,EAAEE,OACKxB,UAAUC,cAEvCG,EAAShB,EAAeiB,KA4D1B,IAAMQ,EAAmB,SAACY,EAAGC,GACrBC,IAAAA,EAAcC,OAAOH,GACrBI,EAAeD,OAAOF,GAExBC,OAAAA,EAAcE,EACT,EAGLF,IAAgBE,EACX,GAGD,GAGV,SAASjB,EAAaO,GACb,OAACA,EAAOW,WAAW,IAAK,IAAIC,MAAM","file":"main.c0201781.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// write code here\nconst tableHeadRef = document.querySelector('thead');\nconst tableBodyRef = document.querySelector('tbody');\nconst tableHeadRowsRef = [...document.querySelectorAll('thead tr th')];\nconst tableBodyRowsRef = [...document.querySelectorAll('tbody tr')];\n\nconst employeeArray = getEmployees(tableBodyRowsRef);\n\ntableHeadRef.addEventListener('click', (e) => {\n  const tableHeadData = e.target;\n  const sortBy = tableHeadData.innerHTML.toLowerCase();\n\n  sortList(employeeArray, sortBy);\n});\n\nfunction getEmployees(list) {\n  const arrayOfEmployees = [];\n\n  list.forEach((row) => {\n    const tableRow = [...row.children];\n    const employeeObject = {};\n\n    for (let i = 0; i < tableRow.length; i++) {\n      const propertyName = tableHeadRowsRef[i].innerHTML.toLowerCase();\n      const propertyValue = tableRow[i].innerHTML;\n\n      employeeObject[propertyName] = propertyValue;\n    }\n\n    arrayOfEmployees.push(employeeObject);\n  });\n\n  return arrayOfEmployees;\n}\n\nfunction sortList(list, sortBy) {\n  const sortedList = [...list];\n\n  sortedList.sort((firstEmployee, secondEmployee) => {\n    let firstSortValue = firstEmployee[sortBy];\n    let secondSortValue = secondEmployee[sortBy];\n\n    if (sortBy === 'salary') {\n      firstSortValue = formatSalary(firstSortValue);\n      secondSortValue = formatSalary(secondSortValue);\n    }\n\n    if (sortBy === 'name' || sortBy === 'position') {\n      return compareAsStrings(firstSortValue, secondSortValue);\n    } else {\n      return firstSortValue - secondSortValue;\n    }\n  });\n\n  tableBodyRef.innerHTML = `\n     ${sortedList\n    .map(\n      (element) =>\n        `\n      <tr>\n        <td>${element.name}</td>\n        <td>${element.position}</td>\n        <td>${element.age}</td>\n        <td>${element.salary}</td>\n      </tr>`\n    )\n    .join('')}\n      `;\n\n  return sortedList;\n}\n\nconst compareAsStrings = (a, b) => {\n  const firstString = String(a);\n  const secondString = String(b);\n\n  if (firstString > secondString) {\n    return 1;\n  }\n\n  if (firstString === secondString) {\n    return 0;\n  }\n\n  return -1;\n};\n\nfunction formatSalary(salary) {\n  return +salary.replaceAll(',', '').slice(1);\n}\n"]}